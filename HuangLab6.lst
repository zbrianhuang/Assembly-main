     1                                  ;Author: Brian Huang
     2                                  ;Date: 3/22/23
     3                                  ;Purpose: Lab 5
     4                                  
     5                                  %include "CPsub64.inc"
     1                              <1> ; Last update: 2019/08/20
     2                              <1> 
     3                              <1> %ifndef CPSUB64
     4                              <1> %define CPSUB64
     5                              <1> 
     6                              <1> ; ------------------------------------------
     7                              <1> ; function prototypes
     8                              <1> ; ------------------------------------------
     9                              <1> extern Clearscr
    10                              <1> extern CloseFile
    11                              <1> extern Crlf
    12                              <1> extern ClearBuffer
    13                              <1> extern Delay
    14                              <1> extern DumpMem
    15                              <1> extern DumpCC
    16                              <1> extern DumpEflags
    17                              <1> extern DumpRegs
    18                              <1> extern IsDigit
    19                              <1> extern Mvcl
    20                              <1> extern FileOpen
    21                              <1> extern FileClose
    22                              <1> extern FileRead
    23                              <1> extern FileWrite
    24                              <1> extern ParseDecimal32
    25                              <1> extern ParseInteger32
    26                              <1> extern ParseDecimal64
    27                              <1> extern ParseInteger64
    28                              <1> extern ReadChar
    29                              <1> extern ReadDec
    30                              <1> extern ReadHex
    31                              <1> extern ReadInt
    32                              <1> extern ReadKey
    33                              <1> extern ReadString
    34                              <1> extern ReadStr
    35                              <1> extern Str_compare
    36                              <1> extern Str_copy
    37                              <1> extern Str_length
    38                              <1> extern StrLength
    39                              <1> extern Str_trim
    40                              <1> extern Str_ucase
    41                              <1> extern WriteBin
    42                              <1> extern WriteBinB
    43                              <1> extern WriteChar
    44                              <1> extern WriteDec
    45                              <1> extern WriteHex
    46                              <1> extern WriteHexDbl
    47                              <1> extern WriteHexB
    48                              <1> extern WriteInt
    49                              <1> extern WriteString
    50                              <1> ; ------------------------------------------
    51                              <1> 
    52                              <1> %endif
     6                                  %include "Macros_CPsub64.inc"
     1                              <1> ;--------------------------- MACROS ------------------------------------------
     2                              <1> ; Change Log:
     3                              <1> ; 02-06-21 CP Rename ifndef for Exit from CPExit to Exit, update mShowRegister
     4                              <1> ;
     5                              <1> ;
     6                              <1> ;-----------------------------------------------------------------------------
     7                              <1> %ifndef MACRO_CPSUB64
     8                              <1> %define MACRO_CPSUB64
     9                              <1> 
    10                              <1> %define STDIN  0
    11                              <1> %define STDOUT 1
    12                              <1> %define STDERR 2
    13                              <1> 
    14                              <1> %define TAB 09h
    15                              <1> %define NL 0Ah
    16                              <1> 
    17                              <1> ; define the timespec structure used in nanosleep
    18                              <1> struc timespec
    19 00000000 <res 00000004>      <1>      tv_sec: resd 1
    20 00000004 <res 00000004>      <1>      tv_nsec: resd 1
    21                              <1> endstruc
    22                              <1> 
    23                              <1> 
    24                              <1> ; Synonym for NASM invoke
    25                              <1> %ifnmacro INVOKE
    26                              <1> %macro INVOKE 1-*.nolist
    27                              <1>      %rep %0 - 1
    28                              <1>      %rotate -1
    29                              <1>      push qword %1
    30                              <1>      %endrep
    31                              <1>      %rotate -1
    32                              <1>      call %1
    33                              <1>      add rsp, ( %0 - 1 ) * 8
    34                              <1> %endmacro
    35                              <1> %endif
    36                              <1> 
    37                              <1> 
    38                              <1> %ifnmacro mWrite
    39                              <1> ;------------------------------------------------------
    40                              <1> %macro mWrite 1.nolist
    41                              <1> ;
    42                              <1> ; Writes a string literal to standard output.
    43                              <1> ; Receives: a string enclosed in single or double 
    44                              <1> ;   quotes (null terminator not required).
    45                              <1> ;------------------------------------------------------
    46                              <1> segment .data
    47                              <1> 	%%string: db %1, 0
    48                              <1> segment .text
    49                              <1> 	push	rdx
    50                              <1> 	mov	rdx,%%string
    51                              <1>  	call	WriteString
    52                              <1>  	pop	rdx
    53                              <1> %endmacro
    54                              <1> %endif
    55                              <1> 
    56                              <1> 
    57                              <1> %ifnmacro mWriteSpace
    58                              <1> ;------------------------------------------------------
    59                              <1> %macro mWriteSpace 0-1.nolist 1
    60                              <1> ;
    61                              <1> ; Writes one or more spaces to standard output.
    62                              <1> ; Receives: an integer specifying the number of spaces.
    63                              <1> ;   If count is blank, a single space is written.
    64                              <1> ;------------------------------------------------------
    65                              <1> segment .data
    66                              <1> %%spaces: times %1 db ' '
    67                              <1> 	db 0
    68                              <1> segment .text
    69                              <1> 	push	rdx
    70                              <1> 	mov	rdx, %%spaces
    71                              <1> 	call	WriteString
    72                              <1> 	pop	rdx
    73                              <1> %endmacro
    74                              <1> %endif
    75                              <1> 
    76                              <1> 
    77                              <1> %ifnmacro mShowRegister
    78                              <1> ;---------------------------------------------------
    79                              <1> %macro mShowRegister 2.nolist
    80                              <1> ;
    81                              <1> ; Displays a 64-bit register name and its contents.
    82                              <1> ; Receives: the register string name, the register.
    83                              <1> ; Returns:  nothing
    84                              <1> ;---------------------------------------------------
    85                              <1> segment .data
    86                              <1> %%tempStr: db "  ", %1,": ",0
    87                              <1> 
    88                              <1> segment .text
    89                              <1> 	push	rax		; save reg	
    90                              <1> 	push	rdx 		; save reg
    91                              <1> 	mov	rdx, %%tempStr	; display the register name
    92                              <1> 	call	WriteString
    93                              <1> 	pop	rdx		; restore reg
    94                              <1> 	mov	rax, %2		; display the reg contents in hex
    95                              <1> 	call	WriteHex
    96                              <1> 	pop	rax             ; restore reg
    97                              <1> %endmacro
    98                              <1> %endif
    99                              <1> 
   100                              <1> 
   101                              <1> %ifnmacro ShowFlag
   102                              <1> ;---------------------------------------------------------------------
   103                              <1> %macro ShowFlag 2.nolist
   104                              <1> ;
   105                              <1> ; Helper macro.
   106                              <1> ; Display a single CPU flag value
   107                              <1> ; Directly accesses the eflags variable in Along32.asm
   108                              <1> ; (This macro cannot be placed in Macros.inc)
   109                              <1> ;---------------------------------------------------------------------
   110                              <1> segment .data
   111                              <1> %%flagStr: db "  ",%1, "="
   112                              <1> %%flagVal: db 0,0
   113                              <1> 
   114                              <1> segment .text
   115                              <1> 	push rax
   116                              <1> 	push rdx
   117                              <1> 	mov  rax, qword [eflags]	; retrieve the flags
   118                              <1> 	mov  byte [%%flagVal],'1'
   119                              <1> 	shr  rax, %2			; shift into carry flag
   120                              <1> 	jc   %%L1
   121                              <1> 	mov  byte [%%flagVal],'0'
   122                              <1> %%L1:
   123                              <1> 	mov  rdx, %%flagStr	; display flag name and value
   124                              <1> 	call WriteString
   125                              <1> 	pop  rdx
   126                              <1> 	pop  rax
   127                              <1> %endmacro
   128                              <1> %endif
   129                              <1> 
   130                              <1> 
   131                              <1> %ifnmacro ShowCC
   132                              <1> ;---------------------------------------------------------------------
   133                              <1> %macro ShowCC 2.nolist
   134                              <1> ;
   135                              <1> ; Helper macro.
   136                              <1> ; Display a single Condition Code Eflag name and value
   137                              <1> ; Directly accesses the eflags variable.
   138                              <1> ; 
   139                              <1> ;---------------------------------------------------------------------
   140                              <1> segment .data
   141                              <1> %%flagStr: db "  ",%1," : "    	; flag name plus = sign
   142                              <1> %%flagVal: db 0,0         	; flag value if 0 or 1, plus NULL
   143                              <1> 
   144                              <1> segment .text
   145                              <1> 	push rax  		; save reg
   146                              <1> 	push rdx		; save reg
   147                              <1> 	mov  rax, qword [eflags]	; retrieve the flags
   148                              <1> 	mov  byte [%%flagVal],'1'	; ON
   149                              <1> 	shr  rax, %2		; shift into carry flag
   150                              <1> 	jc   %%L1
   151                              <1> 	mov  byte [%%flagVal],'0'	; OFF
   152                              <1> %%L1:
   153                              <1> 	mov  rdx, %%flagStr	; display flag name and value
   154                              <1> 	call WriteString
   155                              <1> 	call Crlf		; line feed
   156                              <1> 	pop  rdx		; restore reg
   157                              <1> 	pop  rax		; restore reg
   158                              <1> %endmacro
   159                              <1> %endif
   160                              <1> 
   161                              <1> 
   162                              <1> 
   163                              <1> %ifnmacro CheckInit
   164                              <1> ;-------------------------------------------------------------
   165                              <1> %macro CheckInit 0.nolist
   166                              <1> ;
   167                              <1> ; Helper macro
   168                              <1> ; Check to see if the console handles have been initialized
   169                              <1> ; If not, initialize them now.
   170                              <1> ;-------------------------------------------------------------
   171                              <1> 	cmp byte [InitFlag],0
   172                              <1> 	jne %%exit
   173                              <1> 	mov byte [InitFlag],1
   174                              <1> 	call BufferFlush
   175                              <1> %%exit:
   176                              <1> %endmacro
   177                              <1> %endif
   178                              <1> 
   179                              <1> 
   180                              <1> %ifnmacro SaveRegs
   181                              <1> ;-------------------------------------------------------------
   182                              <1> %macro SaveRegs 0.nolist
   183                              <1> ;
   184                              <1> ; Convenience macro
   185                              <1> ; Save Registers
   186                              <1> ; PUSH the 16 general purpose regs to the stack.
   187                              <1> ;-------------------------------------------------------------
   188                              <1>        push rax
   189                              <1>        push rbx 
   190                              <1>        push rcx
   191                              <1>        push rdx
   192                              <1>        push rsi
   193                              <1>        push rdi
   194                              <1>        push rbp
   195                              <1>        push rsp
   196                              <1>        push r8 	
   197                              <1>        push r9  
   198                              <1>        push r10
   199                              <1>        push r11
   200                              <1>        push r12
   201                              <1>        push r13
   202                              <1>        push r14
   203                              <1>        push r15
   204                              <1> %%exit:
   205                              <1> %endmacro
   206                              <1> %endif
   207                              <1> 
   208                              <1> %ifnmacro RestoreRegs
   209                              <1> ;-------------------------------------------------------------
   210                              <1> %macro RestoreRegs 0.nolist
   211                              <1> ;
   212                              <1> ; Convenience macro
   213                              <1> ; Restore Registers
   214                              <1> ; POP the 16 general purpose regs from the stack.
   215                              <1> ;-------------------------------------------------------------
   216                              <1> 	pop r15
   217                              <1> 	pop r14
   218                              <1> 	pop r13
   219                              <1>      	pop r12
   220                              <1> 	pop r11 
   221                              <1> 	pop r10
   222                              <1>      	pop r9 
   223                              <1>      	pop r8 
   224                              <1> 	pop rsp
   225                              <1>       	pop rbp 
   226                              <1>       	pop rdi
   227                              <1>       	pop rsi
   228                              <1>       	pop rdx
   229                              <1>       	pop rcx 
   230                              <1>       	pop rbx
   231                              <1>       	pop rax
   232                              <1> %%exit:
   233                              <1> %endmacro
   234                              <1> %endif
   235                              <1> 
   236                              <1> ; Termination Macro
   237                              <1> ;-------------------------------------------------------------
   238                              <1> ;
   239                              <1> ; Convenience macro
   240                              <1> ; Exit to operating system under Linux.
   241                              <1> ;-------------------------------------------------------------
   242                              <1> %ifnmacro Exit
   243                              <1> %macro Exit 0.nolist  
   244                              <1>      mov rax, 60
   245                              <1>      xor rdi, rdi
   246                              <1>      syscall
   247                              <1> %%exit:
   248                              <1> %endmacro
   249                              <1> %endif
   250                              <1> 
   251                              <1> ; Termination Macro
   252                              <1> %ifnmacro CPexit
   253                              <1> ;-------------------------------------------------------------
   254                              <1> ;
   255                              <1> ; Convenience macro
   256                              <1> ; Exit to operating system under Linux.
   257                              <1> ;-------------------------------------------------------------
   258                              <1> %macro CPexit 0-1.nolist  
   259                              <1>      mov rax, 60
   260                              <1>      xor rdi, rdi
   261                              <1>      syscall
   262                              <1> %%exit:
   263                              <1> %endmacro
   264                              <1> %endif
   265                              <1> 
   266                              <1> %endif  ;End of Macro Definitions
     7                                  global main
     8                                  
     9                                  section .text
    10                                  
    11                                  main:
    12                                  
    13                                  
    14                                  
    15 00000000 41B800000000            mov r8, 0 ;index
    16 00000006 4C8D3C25[00000000]      lea r15, [array]
    17                                  
    18                                  
    19                                  
    20                                  ;Addition Message
    21 0000000E B801000000              mov rax,1
    22 00000013 BF01000000              mov rdi, 1
    23 00000018 48BE-                   mov rsi, addMsg
    23 0000001A [2B00000000000000] 
    24 00000022 BA17000000              mov rdx, addMsgLen
    25 00000027 0F05                    syscall
    26                                  
    27                                  
    28                                  ;Perform addition & print result
    29 00000029 4D8B37                  mov r14, [r15]
    30 0000002C 4C89F0                  mov rax,r14
    31 0000002F 41B802000000            mov r8,  2
    32 00000035 4F8B34C7                mov r14, [r15+8*r8]
    33 00000039 4C01F0                  add rax,r14
    34 0000003C 4989C1                  mov r9, rax     ;save result
    35 0000003F E8(00000000)            call WriteInt
    36                                  
    37                                  ;linebreak
    38 00000044 B801000000              mov rax,1
    39 00000049 BF01000000              mov rdi,1
    40 0000004E 48BE-                   mov rsi,linebreak
    40 00000050 [2800000000000000] 
    41 00000058 BA03000000              mov rdx,linebreakLen
    42 0000005D 0F05                    syscall
    43                                  
    44                                  ;Subtraction Message
    45 0000005F B801000000              mov rax,1
    46 00000064 BF01000000              mov rdi, 1
    47 00000069 48BE-                   mov rsi, subMsg
    47 0000006B [4200000000000000] 
    48 00000073 BA1D000000              mov rdx, subMsgLen
    49 00000078 0F05                    syscall
    50                                  
    51                                  
    52                                  
    53                                  
    54                                  ;Perform subtraction & print result
    55 0000007A 41B804000000            mov r8, 4
    56 00000080 4F8B34C7                mov r14,[r15+8*r8]
    57 00000084 4C89C8                  mov rax,r9
    58 00000087 4C29F0                  sub rax,r14
    59 0000008A E8(00000000)            call WriteInt
    60                                  
    61 0000008F 4989C2                  mov r10, rax ;save difference
    62                                  
    63                                  ;linebreak
    64 00000092 B801000000              mov rax,1
    65 00000097 BF01000000              mov rdi,1
    66 0000009C 48BE-                   mov rsi,linebreak
    66 0000009E [2800000000000000] 
    67 000000A6 BA03000000              mov rdx,linebreakLen
    68 000000AB 0F05                    syscall
    69                                  
    70                                  ;Multiplication Message
    71 000000AD B801000000              mov rax, 1
    72 000000B2 BF01000000              mov rdi,1
    73 000000B7 48BE-                   mov rsi, mulMsg
    73 000000B9 [5F00000000000000] 
    74 000000C1 BA1E000000              mov rdx, mulMsgLen
    75 000000C6 0F05                    syscall
    76                                  
    77                                  ;Perform Multiplication & print product
    78 000000C8 4D89D6                  mov r14, r10
    79 000000CB 41B801000000            mov r8, 1
    80 000000D1 4B8B04C7                mov rax, [r15+8*r8]
    81 000000D5 49F7EE                  imul r14
    82 000000D8 E8(00000000)            call WriteInt
    83                                  
    84                                  ;save product
    85 000000DD 4989C1                  mov r9,rax
    86                                  
    87                                  ;linebreak
    88 000000E0 B801000000              mov rax,1
    89 000000E5 BF01000000              mov rdi,1
    90 000000EA 48BE-                   mov rsi,linebreak
    90 000000EC [2800000000000000] 
    91 000000F4 BA03000000              mov rdx,linebreakLen
    92 000000F9 0F05                    syscall
    93                                  
    94                                  ;Display Division Message
    95 000000FB B801000000              mov rax,1
    96 00000100 BF01000000              mov rdi,1
    97 00000105 48BE-                   mov rsi,divMsg
    97 00000107 [7D00000000000000] 
    98 0000010F BA1F000000              mov rdx,divMsgLen
    99 00000114 0F05                    syscall
   100                                  
   101                                  ;Perform Division
   102 00000116 4C89C8                  mov rax, r9
   103 00000119 41B803000000            mov r8,3
   104 0000011F 4F8B34C7                mov r14, [r15+r8*8]
   105 00000123 BA00000000              mov rdx,0   
   106 00000128 49F7FE                  idiv DWORD r14
   106          ******************       warning: register size specification ignored [-w+other]
   107 0000012B E8(00000000)            call WriteInt
   108                                  
   109                                  
   110                                  ;store remainder
   111 00000130 4989D7                  mov r15, rdx
   112                                  
   113                                  ;linebreak
   114 00000133 B801000000              mov rax,1
   115 00000138 BF01000000              mov rdi,1
   116 0000013D 48BE-                   mov rsi,linebreak
   116 0000013F [2800000000000000] 
   117 00000147 BA03000000              mov rdx,linebreakLen
   118 0000014C 0F05                    syscall
   119                                  
   120                                  
   121                                  ;Print Remainder Message
   122 0000014E B801000000              mov rax,1
   123 00000153 BF01000000              mov rdi,1
   124 00000158 48BE-                   mov rsi,modMsg
   124 0000015A [9C00000000000000] 
   125 00000162 BA0B000000              mov rdx,modMsgLen
   126 00000167 0F05                    syscall
   127                                  
   128                                  ;print remainder
   129                                  
   130 00000169 4C89F8                  mov rax,r15
   131                                      
   132 0000016C E8(00000000)            call WriteInt
   133                                  
   134                                  
   135                                  ;linebreak
   136 00000171 B801000000              mov rax,1
   137 00000176 BF01000000              mov rdi,1
   138 0000017B 48BE-                   mov rsi,linebreak
   138 0000017D [2800000000000000] 
   139 00000185 BA03000000              mov rdx,linebreakLen
   140 0000018A 0F05                    syscall
   141                                  
   142                                  
   143                                  
   144                                  
   145                                  ;exit
   146 0000018C B83C0000004831FF0F-     Exit
   146 00000195 05                 
   147                                  
   148                                  
   149                                  section .data
   150 00000000 F40100000000000090-     array: DQ 500,400,300,200,100
   150 00000009 010000000000002C01-
   150 00000012 000000000000C80000-
   150 0000001B 000000000064000000-
   150 00000024 00000000           
   151 00000028 200A00                  linebreak: db" ",0ah,0;linebreak 
   152                                  linebreakLen:equ($-linebreak);linebreak len
   153 0000002B 456C656D656E743120-     addMsg: db "Element1 + Element 3 = " ;message to display when adding elements 1 and 2
   153 00000034 2B20456C656D656E74-
   153 0000003D 2033203D20         
   154                                  addMsgLen: equ($-addMsg)
   155 00000042 456C656D656E743520-     subMsg: db "Element5 - Previous Result = " ;message to display when subtracting elements 1 and 2
   155 0000004B 2D2050726576696F75-
   155 00000054 7320526573756C7420-
   155 0000005D 3D20               
   156                                  subMsgLen: equ($-subMsg)
   157 0000005F 50726576696F757320-     mulMsg: db "Previous Result * Element 2 = " ;message to display when multiplying elements 1 and 2
   157 00000068 526573756C74202A20-
   157 00000071 456C656D656E742032-
   157 0000007A 203D20             
   158                                  mulMsgLen: equ($-mulMsg)
   159 0000007D 50726576696F757320-     divMsg: db "Previous Result /  Element 2 = " ;message to display when getting quotient
   159 00000086 526573756C74202F20-
   159 0000008F 20456C656D656E7420-
   159 00000098 32203D20           
   160                                  divMsgLen: equ($-divMsg)
   161 0000009C 52656D61696E646572-     modMsg: db "Remainder: "             ;Remainder
   161 000000A5 3A20               
   162                                  modMsgLen: equ($-modMsg)
   163                                  
   164                                  
   165                                  ;100+300=400
   166                                  ;500-400=100
   167                                  ;100*200=20000
   168                                  ;20000/200
