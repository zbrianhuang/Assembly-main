     1                                  ;Brian Huang
     2                                  ;4/19/23
     3                                  ;Lab 10
     4                                  ;Macro prints out math expressions
     5                                  %include "CPsub64.inc"
     1                              <1> ; Last update: 2019/08/20
     2                              <1> 
     3                              <1> %ifndef CPSUB64
     4                              <1> %define CPSUB64
     5                              <1> 
     6                              <1> ; ------------------------------------------
     7                              <1> ; function prototypes
     8                              <1> ; ------------------------------------------
     9                              <1> extern Clearscr
    10                              <1> extern CloseFile
    11                              <1> extern Crlf
    12                              <1> extern ClearBuffer
    13                              <1> extern Delay
    14                              <1> extern DumpMem
    15                              <1> extern DumpCC
    16                              <1> extern DumpEflags
    17                              <1> extern DumpRegs
    18                              <1> extern IsDigit
    19                              <1> extern Mvcl
    20                              <1> extern FileOpen
    21                              <1> extern FileClose
    22                              <1> extern FileRead
    23                              <1> extern FileWrite
    24                              <1> extern ParseDecimal32
    25                              <1> extern ParseInteger32
    26                              <1> extern ParseDecimal64
    27                              <1> extern ParseInteger64
    28                              <1> extern ReadChar
    29                              <1> extern ReadDec
    30                              <1> extern ReadHex
    31                              <1> extern ReadInt
    32                              <1> extern ReadKey
    33                              <1> extern ReadString
    34                              <1> extern ReadStr
    35                              <1> extern Str_compare
    36                              <1> extern Str_copy
    37                              <1> extern Str_length
    38                              <1> extern StrLength
    39                              <1> extern Str_trim
    40                              <1> extern Str_ucase
    41                              <1> extern WriteBin
    42                              <1> extern WriteBinB
    43                              <1> extern WriteChar
    44                              <1> extern WriteDec
    45                              <1> extern WriteHex
    46                              <1> extern WriteHexDbl
    47                              <1> extern WriteHexB
    48                              <1> extern WriteInt
    49                              <1> extern WriteString
    50                              <1> ; ------------------------------------------
    51                              <1> 
    52                              <1> %endif
     6                                  %include "Macros_CPsub64.inc"
     1                              <1> ;--------------------------- MACROS ------------------------------------------
     2                              <1> ; Change Log:
     3                              <1> ; 02-06-21 CP Rename ifndef for Exit from CPExit to Exit, update mShowRegister
     4                              <1> ;
     5                              <1> ;
     6                              <1> ;-----------------------------------------------------------------------------
     7                              <1> %ifndef MACRO_CPSUB64
     8                              <1> %define MACRO_CPSUB64
     9                              <1> 
    10                              <1> %define STDIN  0
    11                              <1> %define STDOUT 1
    12                              <1> %define STDERR 2
    13                              <1> 
    14                              <1> %define TAB 09h
    15                              <1> %define NL 0Ah
    16                              <1> 
    17                              <1> ; define the timespec structure used in nanosleep
    18                              <1> struc timespec
    19 00000000 <res 00000004>      <1>      tv_sec: resd 1
    20 00000004 <res 00000004>      <1>      tv_nsec: resd 1
    21                              <1> endstruc
    22                              <1> 
    23                              <1> 
    24                              <1> ; Synonym for NASM invoke
    25                              <1> %ifnmacro INVOKE
    26                              <1> %macro INVOKE 1-*.nolist
    27                              <1>      %rep %0 - 1
    28                              <1>      %rotate -1
    29                              <1>      push qword %1
    30                              <1>      %endrep
    31                              <1>      %rotate -1
    32                              <1>      call %1
    33                              <1>      add rsp, ( %0 - 1 ) * 8
    34                              <1> %endmacro
    35                              <1> %endif
    36                              <1> 
    37                              <1> 
    38                              <1> %ifnmacro mWrite
    39                              <1> ;------------------------------------------------------
    40                              <1> %macro mWrite 1.nolist
    41                              <1> ;
    42                              <1> ; Writes a string literal to standard output.
    43                              <1> ; Receives: a string enclosed in single or double 
    44                              <1> ;   quotes (null terminator not required).
    45                              <1> ;------------------------------------------------------
    46                              <1> segment .data
    47                              <1> 	%%string: db %1, 0
    48                              <1> segment .text
    49                              <1> 	push	rdx
    50                              <1> 	mov	rdx,%%string
    51                              <1>  	call	WriteString
    52                              <1>  	pop	rdx
    53                              <1> %endmacro
    54                              <1> %endif
    55                              <1> 
    56                              <1> 
    57                              <1> %ifnmacro mWriteSpace
    58                              <1> ;------------------------------------------------------
    59                              <1> %macro mWriteSpace 0-1.nolist 1
    60                              <1> ;
    61                              <1> ; Writes one or more spaces to standard output.
    62                              <1> ; Receives: an integer specifying the number of spaces.
    63                              <1> ;   If count is blank, a single space is written.
    64                              <1> ;------------------------------------------------------
    65                              <1> segment .data
    66                              <1> %%spaces: times %1 db ' '
    67                              <1> 	db 0
    68                              <1> segment .text
    69                              <1> 	push	rdx
    70                              <1> 	mov	rdx, %%spaces
    71                              <1> 	call	WriteString
    72                              <1> 	pop	rdx
    73                              <1> %endmacro
    74                              <1> %endif
    75                              <1> 
    76                              <1> 
    77                              <1> %ifnmacro mShowRegister
    78                              <1> ;---------------------------------------------------
    79                              <1> %macro mShowRegister 2.nolist
    80                              <1> ;
    81                              <1> ; Displays a 64-bit register name and its contents.
    82                              <1> ; Receives: the register string name, the register.
    83                              <1> ; Returns:  nothing
    84                              <1> ;---------------------------------------------------
    85                              <1> segment .data
    86                              <1> %%tempStr: db "  ", %1,": ",0
    87                              <1> 
    88                              <1> segment .text
    89                              <1> 	push	rax		; save reg	
    90                              <1> 	push	rdx 		; save reg
    91                              <1> 	mov	rdx, %%tempStr	; display the register name
    92                              <1> 	call	WriteString
    93                              <1> 	pop	rdx		; restore reg
    94                              <1> 	mov	rax, %2		; display the reg contents in hex
    95                              <1> 	call	WriteHex
    96                              <1> 	pop	rax             ; restore reg
    97                              <1> %endmacro
    98                              <1> %endif
    99                              <1> 
   100                              <1> 
   101                              <1> %ifnmacro ShowFlag
   102                              <1> ;---------------------------------------------------------------------
   103                              <1> %macro ShowFlag 2.nolist
   104                              <1> ;
   105                              <1> ; Helper macro.
   106                              <1> ; Display a single CPU flag value
   107                              <1> ; Directly accesses the eflags variable in Along32.asm
   108                              <1> ; (This macro cannot be placed in Macros.inc)
   109                              <1> ;---------------------------------------------------------------------
   110                              <1> segment .data
   111                              <1> %%flagStr: db "  ",%1, "="
   112                              <1> %%flagVal: db 0,0
   113                              <1> 
   114                              <1> segment .text
   115                              <1> 	push rax
   116                              <1> 	push rdx
   117                              <1> 	mov  rax, qword [eflags]	; retrieve the flags
   118                              <1> 	mov  byte [%%flagVal],'1'
   119                              <1> 	shr  rax, %2			; shift into carry flag
   120                              <1> 	jc   %%L1
   121                              <1> 	mov  byte [%%flagVal],'0'
   122                              <1> %%L1:
   123                              <1> 	mov  rdx, %%flagStr	; display flag name and value
   124                              <1> 	call WriteString
   125                              <1> 	pop  rdx
   126                              <1> 	pop  rax
   127                              <1> %endmacro
   128                              <1> %endif
   129                              <1> 
   130                              <1> 
   131                              <1> %ifnmacro ShowCC
   132                              <1> ;---------------------------------------------------------------------
   133                              <1> %macro ShowCC 2.nolist
   134                              <1> ;
   135                              <1> ; Helper macro.
   136                              <1> ; Display a single Condition Code Eflag name and value
   137                              <1> ; Directly accesses the eflags variable.
   138                              <1> ; 
   139                              <1> ;---------------------------------------------------------------------
   140                              <1> segment .data
   141                              <1> %%flagStr: db "  ",%1," : "    	; flag name plus = sign
   142                              <1> %%flagVal: db 0,0         	; flag value if 0 or 1, plus NULL
   143                              <1> 
   144                              <1> segment .text
   145                              <1> 	push rax  		; save reg
   146                              <1> 	push rdx		; save reg
   147                              <1> 	mov  rax, qword [eflags]	; retrieve the flags
   148                              <1> 	mov  byte [%%flagVal],'1'	; ON
   149                              <1> 	shr  rax, %2		; shift into carry flag
   150                              <1> 	jc   %%L1
   151                              <1> 	mov  byte [%%flagVal],'0'	; OFF
   152                              <1> %%L1:
   153                              <1> 	mov  rdx, %%flagStr	; display flag name and value
   154                              <1> 	call WriteString
   155                              <1> 	call Crlf		; line feed
   156                              <1> 	pop  rdx		; restore reg
   157                              <1> 	pop  rax		; restore reg
   158                              <1> %endmacro
   159                              <1> %endif
   160                              <1> 
   161                              <1> 
   162                              <1> 
   163                              <1> %ifnmacro CheckInit
   164                              <1> ;-------------------------------------------------------------
   165                              <1> %macro CheckInit 0.nolist
   166                              <1> ;
   167                              <1> ; Helper macro
   168                              <1> ; Check to see if the console handles have been initialized
   169                              <1> ; If not, initialize them now.
   170                              <1> ;-------------------------------------------------------------
   171                              <1> 	cmp byte [InitFlag],0
   172                              <1> 	jne %%exit
   173                              <1> 	mov byte [InitFlag],1
   174                              <1> 	call BufferFlush
   175                              <1> %%exit:
   176                              <1> %endmacro
   177                              <1> %endif
   178                              <1> 
   179                              <1> 
   180                              <1> %ifnmacro SaveRegs
   181                              <1> ;-------------------------------------------------------------
   182                              <1> %macro SaveRegs 0.nolist
   183                              <1> ;
   184                              <1> ; Convenience macro
   185                              <1> ; Save Registers
   186                              <1> ; PUSH the 16 general purpose regs to the stack.
   187                              <1> ;-------------------------------------------------------------
   188                              <1>        push rax
   189                              <1>        push rbx 
   190                              <1>        push rcx
   191                              <1>        push rdx
   192                              <1>        push rsi
   193                              <1>        push rdi
   194                              <1>        push rbp
   195                              <1>        push rsp
   196                              <1>        push r8 	
   197                              <1>        push r9  
   198                              <1>        push r10
   199                              <1>        push r11
   200                              <1>        push r12
   201                              <1>        push r13
   202                              <1>        push r14
   203                              <1>        push r15
   204                              <1> %%exit:
   205                              <1> %endmacro
   206                              <1> %endif
   207                              <1> 
   208                              <1> %ifnmacro RestoreRegs
   209                              <1> ;-------------------------------------------------------------
   210                              <1> %macro RestoreRegs 0.nolist
   211                              <1> ;
   212                              <1> ; Convenience macro
   213                              <1> ; Restore Registers
   214                              <1> ; POP the 16 general purpose regs from the stack.
   215                              <1> ;-------------------------------------------------------------
   216                              <1> 	pop r15
   217                              <1> 	pop r14
   218                              <1> 	pop r13
   219                              <1>      	pop r12
   220                              <1> 	pop r11 
   221                              <1> 	pop r10
   222                              <1>      	pop r9 
   223                              <1>      	pop r8 
   224                              <1> 	pop rsp
   225                              <1>       	pop rbp 
   226                              <1>       	pop rdi
   227                              <1>       	pop rsi
   228                              <1>       	pop rdx
   229                              <1>       	pop rcx 
   230                              <1>       	pop rbx
   231                              <1>       	pop rax
   232                              <1> %%exit:
   233                              <1> %endmacro
   234                              <1> %endif
   235                              <1> 
   236                              <1> ; Termination Macro
   237                              <1> ;-------------------------------------------------------------
   238                              <1> ;
   239                              <1> ; Convenience macro
   240                              <1> ; Exit to operating system under Linux.
   241                              <1> ;-------------------------------------------------------------
   242                              <1> %ifnmacro Exit
   243                              <1> %macro Exit 0.nolist  
   244                              <1>      mov rax, 60
   245                              <1>      xor rdi, rdi
   246                              <1>      syscall
   247                              <1> %%exit:
   248                              <1> %endmacro
   249                              <1> %endif
   250                              <1> 
   251                              <1> ; Termination Macro
   252                              <1> %ifnmacro CPexit
   253                              <1> ;-------------------------------------------------------------
   254                              <1> ;
   255                              <1> ; Convenience macro
   256                              <1> ; Exit to operating system under Linux.
   257                              <1> ;-------------------------------------------------------------
   258                              <1> %macro CPexit 0-1.nolist  
   259                              <1>      mov rax, 60
   260                              <1>      xor rdi, rdi
   261                              <1>      syscall
   262                              <1> %%exit:
   263                              <1> %endmacro
   264                              <1> %endif
   265                              <1> 
   266                              <1> %endif  ;End of Macro Definitions
     7                                  %include "Lab10Macro.inc"
     1                              <1> ;Brian Huang
     2                              <1> ;4/19/23
     3                              <1> ;Lab 10
     4                              <1> 
     5                              <1> %include "CPsub64.inc"
     1                              <2> ; Last update: 2019/08/20
     2                              <2> 
     3                              <2> %ifndef CPSUB64
     4                              <2> %define CPSUB64
     5                              <2> 
     6                              <2> ; ------------------------------------------
     7                              <2> ; function prototypes
     8                              <2> ; ------------------------------------------
     9                              <2> extern Clearscr
    10                              <2> extern CloseFile
    11                              <2> extern Crlf
    12                              <2> extern ClearBuffer
    13                              <2> extern Delay
    14                              <2> extern DumpMem
    15                              <2> extern DumpCC
    16                              <2> extern DumpEflags
    17                              <2> extern DumpRegs
    18                              <2> extern IsDigit
    19                              <2> extern Mvcl
    20                              <2> extern FileOpen
    21                              <2> extern FileClose
    22                              <2> extern FileRead
    23                              <2> extern FileWrite
    24                              <2> extern ParseDecimal32
    25                              <2> extern ParseInteger32
    26                              <2> extern ParseDecimal64
    27                              <2> extern ParseInteger64
    28                              <2> extern ReadChar
    29                              <2> extern ReadDec
    30                              <2> extern ReadHex
    31                              <2> extern ReadInt
    32                              <2> extern ReadKey
    33                              <2> extern ReadString
    34                              <2> extern ReadStr
    35                              <2> extern Str_compare
    36                              <2> extern Str_copy
    37                              <2> extern Str_length
    38                              <2> extern StrLength
    39                              <2> extern Str_trim
    40                              <2> extern Str_ucase
    41                              <2> extern WriteBin
    42                              <2> extern WriteBinB
    43                              <2> extern WriteChar
    44                              <2> extern WriteDec
    45                              <2> extern WriteHex
    46                              <2> extern WriteHexDbl
    47                              <2> extern WriteHexB
    48                              <2> extern WriteInt
    49                              <2> extern WriteString
    50                              <2> ; ------------------------------------------
    51                              <2> 
    52                              <2> %endif
     6                              <1> %include "Macros_CPsub64.inc"
     1                              <2> ;--------------------------- MACROS ------------------------------------------
     2                              <2> ; Change Log:
     3                              <2> ; 02-06-21 CP Rename ifndef for Exit from CPExit to Exit, update mShowRegister
     4                              <2> ;
     5                              <2> ;
     6                              <2> ;-----------------------------------------------------------------------------
     7                              <2> %ifndef MACRO_CPSUB64
     8                              <2> %define MACRO_CPSUB64
     9                              <2> 
    10                              <2> %define STDIN  0
    11                              <2> %define STDOUT 1
    12                              <2> %define STDERR 2
    13                              <2> 
    14                              <2> %define TAB 09h
    15                              <2> %define NL 0Ah
    16                              <2> 
    17                              <2> ; define the timespec structure used in nanosleep
    18                              <2> struc timespec
    19                              <2>      tv_sec: resd 1
    20                              <2>      tv_nsec: resd 1
    21                              <2> endstruc
    22                              <2> 
    23                              <2> 
    24                              <2> ; Synonym for NASM invoke
    25                              <2> %ifnmacro INVOKE
    26                              <2> %macro INVOKE 1-*.nolist
    27                              <2>      %rep %0 - 1
    28                              <2>      %rotate -1
    29                              <2>      push qword %1
    30                              <2>      %endrep
    31                              <2>      %rotate -1
    32                              <2>      call %1
    33                              <2>      add rsp, ( %0 - 1 ) * 8
    34                              <2> %endmacro
    35                              <2> %endif
    36                              <2> 
    37                              <2> 
    38                              <2> %ifnmacro mWrite
    39                              <2> ;------------------------------------------------------
    40                              <2> %macro mWrite 1.nolist
    41                              <2> ;
    42                              <2> ; Writes a string literal to standard output.
    43                              <2> ; Receives: a string enclosed in single or double 
    44                              <2> ;   quotes (null terminator not required).
    45                              <2> ;------------------------------------------------------
    46                              <2> segment .data
    47                              <2> 	%%string: db %1, 0
    48                              <2> segment .text
    49                              <2> 	push	rdx
    50                              <2> 	mov	rdx,%%string
    51                              <2>  	call	WriteString
    52                              <2>  	pop	rdx
    53                              <2> %endmacro
    54                              <2> %endif
    55                              <2> 
    56                              <2> 
    57                              <2> %ifnmacro mWriteSpace
    58                              <2> ;------------------------------------------------------
    59                              <2> %macro mWriteSpace 0-1.nolist 1
    60                              <2> ;
    61                              <2> ; Writes one or more spaces to standard output.
    62                              <2> ; Receives: an integer specifying the number of spaces.
    63                              <2> ;   If count is blank, a single space is written.
    64                              <2> ;------------------------------------------------------
    65                              <2> segment .data
    66                              <2> %%spaces: times %1 db ' '
    67                              <2> 	db 0
    68                              <2> segment .text
    69                              <2> 	push	rdx
    70                              <2> 	mov	rdx, %%spaces
    71                              <2> 	call	WriteString
    72                              <2> 	pop	rdx
    73                              <2> %endmacro
    74                              <2> %endif
    75                              <2> 
    76                              <2> 
    77                              <2> %ifnmacro mShowRegister
    78                              <2> ;---------------------------------------------------
    79                              <2> %macro mShowRegister 2.nolist
    80                              <2> ;
    81                              <2> ; Displays a 64-bit register name and its contents.
    82                              <2> ; Receives: the register string name, the register.
    83                              <2> ; Returns:  nothing
    84                              <2> ;---------------------------------------------------
    85                              <2> segment .data
    86                              <2> %%tempStr: db "  ", %1,": ",0
    87                              <2> 
    88                              <2> segment .text
    89                              <2> 	push	rax		; save reg	
    90                              <2> 	push	rdx 		; save reg
    91                              <2> 	mov	rdx, %%tempStr	; display the register name
    92                              <2> 	call	WriteString
    93                              <2> 	pop	rdx		; restore reg
    94                              <2> 	mov	rax, %2		; display the reg contents in hex
    95                              <2> 	call	WriteHex
    96                              <2> 	pop	rax             ; restore reg
    97                              <2> %endmacro
    98                              <2> %endif
    99                              <2> 
   100                              <2> 
   101                              <2> %ifnmacro ShowFlag
   102                              <2> ;---------------------------------------------------------------------
   103                              <2> %macro ShowFlag 2.nolist
   104                              <2> ;
   105                              <2> ; Helper macro.
   106                              <2> ; Display a single CPU flag value
   107                              <2> ; Directly accesses the eflags variable in Along32.asm
   108                              <2> ; (This macro cannot be placed in Macros.inc)
   109                              <2> ;---------------------------------------------------------------------
   110                              <2> segment .data
   111                              <2> %%flagStr: db "  ",%1, "="
   112                              <2> %%flagVal: db 0,0
   113                              <2> 
   114                              <2> segment .text
   115                              <2> 	push rax
   116                              <2> 	push rdx
   117                              <2> 	mov  rax, qword [eflags]	; retrieve the flags
   118                              <2> 	mov  byte [%%flagVal],'1'
   119                              <2> 	shr  rax, %2			; shift into carry flag
   120                              <2> 	jc   %%L1
   121                              <2> 	mov  byte [%%flagVal],'0'
   122                              <2> %%L1:
   123                              <2> 	mov  rdx, %%flagStr	; display flag name and value
   124                              <2> 	call WriteString
   125                              <2> 	pop  rdx
   126                              <2> 	pop  rax
   127                              <2> %endmacro
   128                              <2> %endif
   129                              <2> 
   130                              <2> 
   131                              <2> %ifnmacro ShowCC
   132                              <2> ;---------------------------------------------------------------------
   133                              <2> %macro ShowCC 2.nolist
   134                              <2> ;
   135                              <2> ; Helper macro.
   136                              <2> ; Display a single Condition Code Eflag name and value
   137                              <2> ; Directly accesses the eflags variable.
   138                              <2> ; 
   139                              <2> ;---------------------------------------------------------------------
   140                              <2> segment .data
   141                              <2> %%flagStr: db "  ",%1," : "    	; flag name plus = sign
   142                              <2> %%flagVal: db 0,0         	; flag value if 0 or 1, plus NULL
   143                              <2> 
   144                              <2> segment .text
   145                              <2> 	push rax  		; save reg
   146                              <2> 	push rdx		; save reg
   147                              <2> 	mov  rax, qword [eflags]	; retrieve the flags
   148                              <2> 	mov  byte [%%flagVal],'1'	; ON
   149                              <2> 	shr  rax, %2		; shift into carry flag
   150                              <2> 	jc   %%L1
   151                              <2> 	mov  byte [%%flagVal],'0'	; OFF
   152                              <2> %%L1:
   153                              <2> 	mov  rdx, %%flagStr	; display flag name and value
   154                              <2> 	call WriteString
   155                              <2> 	call Crlf		; line feed
   156                              <2> 	pop  rdx		; restore reg
   157                              <2> 	pop  rax		; restore reg
   158                              <2> %endmacro
   159                              <2> %endif
   160                              <2> 
   161                              <2> 
   162                              <2> 
   163                              <2> %ifnmacro CheckInit
   164                              <2> ;-------------------------------------------------------------
   165                              <2> %macro CheckInit 0.nolist
   166                              <2> ;
   167                              <2> ; Helper macro
   168                              <2> ; Check to see if the console handles have been initialized
   169                              <2> ; If not, initialize them now.
   170                              <2> ;-------------------------------------------------------------
   171                              <2> 	cmp byte [InitFlag],0
   172                              <2> 	jne %%exit
   173                              <2> 	mov byte [InitFlag],1
   174                              <2> 	call BufferFlush
   175                              <2> %%exit:
   176                              <2> %endmacro
   177                              <2> %endif
   178                              <2> 
   179                              <2> 
   180                              <2> %ifnmacro SaveRegs
   181                              <2> ;-------------------------------------------------------------
   182                              <2> %macro SaveRegs 0.nolist
   183                              <2> ;
   184                              <2> ; Convenience macro
   185                              <2> ; Save Registers
   186                              <2> ; PUSH the 16 general purpose regs to the stack.
   187                              <2> ;-------------------------------------------------------------
   188                              <2>        push rax
   189                              <2>        push rbx 
   190                              <2>        push rcx
   191                              <2>        push rdx
   192                              <2>        push rsi
   193                              <2>        push rdi
   194                              <2>        push rbp
   195                              <2>        push rsp
   196                              <2>        push r8 	
   197                              <2>        push r9  
   198                              <2>        push r10
   199                              <2>        push r11
   200                              <2>        push r12
   201                              <2>        push r13
   202                              <2>        push r14
   203                              <2>        push r15
   204                              <2> %%exit:
   205                              <2> %endmacro
   206                              <2> %endif
   207                              <2> 
   208                              <2> %ifnmacro RestoreRegs
   209                              <2> ;-------------------------------------------------------------
   210                              <2> %macro RestoreRegs 0.nolist
   211                              <2> ;
   212                              <2> ; Convenience macro
   213                              <2> ; Restore Registers
   214                              <2> ; POP the 16 general purpose regs from the stack.
   215                              <2> ;-------------------------------------------------------------
   216                              <2> 	pop r15
   217                              <2> 	pop r14
   218                              <2> 	pop r13
   219                              <2>      	pop r12
   220                              <2> 	pop r11 
   221                              <2> 	pop r10
   222                              <2>      	pop r9 
   223                              <2>      	pop r8 
   224                              <2> 	pop rsp
   225                              <2>       	pop rbp 
   226                              <2>       	pop rdi
   227                              <2>       	pop rsi
   228                              <2>       	pop rdx
   229                              <2>       	pop rcx 
   230                              <2>       	pop rbx
   231                              <2>       	pop rax
   232                              <2> %%exit:
   233                              <2> %endmacro
   234                              <2> %endif
   235                              <2> 
   236                              <2> ; Termination Macro
   237                              <2> ;-------------------------------------------------------------
   238                              <2> ;
   239                              <2> ; Convenience macro
   240                              <2> ; Exit to operating system under Linux.
   241                              <2> ;-------------------------------------------------------------
   242                              <2> %ifnmacro Exit
   243                              <2> %macro Exit 0.nolist  
   244                              <2>      mov rax, 60
   245                              <2>      xor rdi, rdi
   246                              <2>      syscall
   247                              <2> %%exit:
   248                              <2> %endmacro
   249                              <2> %endif
   250                              <2> 
   251                              <2> ; Termination Macro
   252                              <2> %ifnmacro CPexit
   253                              <2> ;-------------------------------------------------------------
   254                              <2> ;
   255                              <2> ; Convenience macro
   256                              <2> ; Exit to operating system under Linux.
   257                              <2> ;-------------------------------------------------------------
   258                              <2> %macro CPexit 0-1.nolist  
   259                              <2>      mov rax, 60
   260                              <2>      xor rdi, rdi
   261                              <2>      syscall
   262                              <2> %%exit:
   263                              <2> %endmacro
   264                              <2> %endif
   265                              <2> 
   266                              <2> %endif  ;End of Macro Definitions
     7                              <1> 
     8                              <1> %macro print_exp 6
     9                              <1> mov rdx,%1
    10                              <1> call WriteString
    11                              <1> mov rax,%2
    12                              <1> call WriteDec
    13                              <1> mov rdx,%3
    14                              <1> call WriteString
    15                              <1> mov rax,%4
    16                              <1> call WriteDec
    17                              <1> mov rdx,%5
    18                              <1> call WriteString
    19                              <1> mov rax,%6
    20                              <1> call WriteInt
    21                              <1> %endmacro
     8                                  
     9                                  global main
    10                                  
    11                                  section .text
    12                                  main:
    13                                  
    14 00000000 56                      push rsi
    15 00000001 57                      push rdi
    16                                  
    17                                  
    18 00000002 4883C608                add rsi,8
    19 00000006 4C8B3E                  mov r15,[rsi]
    20                                  
    21 00000009 4883C608                add rsi,8
    22 0000000D 4C8B26                  mov r12,[rsi]
    23                                  
    24 00000010 4883C608                add rsi,8
    25 00000014 4C8B36                  mov r14,[rsi]
    26                                  
    27 00000017 5E                      pop rsi
    28 00000018 5F                      pop rdi
    29                                  
    30                                  
    31                                  
    32                                  ;Convert Strings to Integers
    33 00000019 4C89FA                  mov rdx,r15
    34 0000001C B9FF000000              mov rcx,255
    35 00000021 E8(00000000)            call ParseInteger64
    36 00000026 4989C7                  mov r15,rax
    37                                  
    38 00000029 4C89F2                  mov rdx, r14
    39 0000002C B9FF000000              mov rcx,255
    40 00000031 E8(00000000)            call ParseInteger64
    41 00000036 4989C6                  mov r14,rax
    42                                  
    43                                  
    44                                  
    45 00000039 50                      push rax
    46 0000003A 52                      push rdx
    47                                  
    48                                  
    49 0000003B E80C000000              call math
    50                                  
    51                                  
    52 00000040 58                      pop rax
    53 00000041 5A                      pop rdx
    54                                  
    55                                  
    56                                  
    57                                  ;movzx rdx, word [userInput];
    58                                  
    59                                  ;cmp rdx,'y'
    60                                  ;je start
    61                                  
    62                                  
    63                                  
    64                                  ;exit
    65 00000042 B83C000000              mov rax, 60
    66 00000047 4831FF                  xor rdi, rdi
    67 0000004A 0F05                    syscall
    68                                  
    69                                  
    70                                  ;math function
    71                                  math:
    72                                  
    73                                  ;prologue
    74 0000004C 55                      push rbp
    75 0000004D 4889E5                  mov rbp,rsp;set pointer to current top on the stack
    76 00000050 53                      push rbx
    77                                  
    78                                  
    79                                  ;perform calculations
    80                                  
    81                                  
    82                                  
    83 00000051 490FB71424              movzx rdx, word [r12]
    84 00000056 4883FA2B                cmp rdx, '+' ;2bh in hex
    85 0000005A 7463                    je addition;equALS
    86                                  
    87 0000005C 4883FA2D                cmp rdx, '-'
    88 00000060 7414                    je subtraction
    89                                  
    90 00000062 4883FA2F                cmp rdx, '/'
    91 00000066 0F84E8000000            je division
    92                                  
    93 0000006C 4883FA2A                cmp rdx, '*'
    94 00000070 0F8492000000            je multiplication
    95                                  
    96                                  
    97                                  
    98                                  
    99                                  
   100                                  subtraction:
   101 00000076 4D89FD                  mov r13,r15
   102 00000079 4D29F7                  sub r15,r14
   103                                  print_exp resultMessage,r13,r12,r14,equals,r15
   103 0000007C 48BA-               <1> mov rdx,%1
   103 0000007E [0000000000000000]  <1>
   103 00000086 E8(00000000)        <1> call WriteString
   103 0000008B 4C89E8              <1> mov rax,%2
   103 0000008E E8(00000000)        <1> call WriteDec
   103 00000093 4C89E2              <1> mov rdx,%3
   103 00000096 E8(00000000)        <1> call WriteString
   103 0000009B 4C89F0              <1> mov rax,%4
   103 0000009E E8(00000000)        <1> call WriteDec
   103 000000A3 48BA-               <1> mov rdx,%5
   103 000000A5 [0900000000000000]  <1>
   103 000000AD E8(00000000)        <1> call WriteString
   103 000000B2 4C89F8              <1> mov rax,%6
   103 000000B5 E8(00000000)        <1> call WriteInt
   104 000000BA E900010000              jmp result
   105                                  
   106                                  addition:
   107                                  
   108                                  ;do da addition
   109 000000BF 4D89FD                  mov r13,r15;save initial values
   110 000000C2 4D01F7                  add r15,r14
   111                                  
   112                                  print_exp resultMessage,r13,r12,r14,equals,r15
   112 000000C5 48BA-               <1> mov rdx,%1
   112 000000C7 [0000000000000000]  <1>
   112 000000CF E8(00000000)        <1> call WriteString
   112 000000D4 4C89E8              <1> mov rax,%2
   112 000000D7 E8(00000000)        <1> call WriteDec
   112 000000DC 4C89E2              <1> mov rdx,%3
   112 000000DF E8(00000000)        <1> call WriteString
   112 000000E4 4C89F0              <1> mov rax,%4
   112 000000E7 E8(00000000)        <1> call WriteDec
   112 000000EC 48BA-               <1> mov rdx,%5
   112 000000EE [0900000000000000]  <1>
   112 000000F6 E8(00000000)        <1> call WriteString
   112 000000FB 4C89F8              <1> mov rax,%6
   112 000000FE E8(00000000)        <1> call WriteInt
   113                                  
   114 00000103 E9B7000000              jmp result
   115                                  
   116                                  multiplication:
   117 00000108 4D89FD                  mov r13,r15;save initial value
   118 0000010B 4C89F8                  mov rax,r15
   119 0000010E 49F7EE                  imul r14
   120 00000111 4989C7                  mov r15,rax;save the result back to r15
   121                                  
   122                                  print_exp resultMessage,r13,r12,r14,equals,r15
   122 00000114 48BA-               <1> mov rdx,%1
   122 00000116 [0000000000000000]  <1>
   122 0000011E E8(00000000)        <1> call WriteString
   122 00000123 4C89E8              <1> mov rax,%2
   122 00000126 E8(00000000)        <1> call WriteDec
   122 0000012B 4C89E2              <1> mov rdx,%3
   122 0000012E E8(00000000)        <1> call WriteString
   122 00000133 4C89F0              <1> mov rax,%4
   122 00000136 E8(00000000)        <1> call WriteDec
   122 0000013B 48BA-               <1> mov rdx,%5
   122 0000013D [0900000000000000]  <1>
   122 00000145 E8(00000000)        <1> call WriteString
   122 0000014A 4C89F8              <1> mov rax,%6
   122 0000014D E8(00000000)        <1> call WriteInt
   123 00000152 EB6B                    jmp result
   124                                  
   125                                  division:
   126 00000154 4D89FD                  mov r13,r15 ;save inital input
   127 00000157 4C89F8                  mov rax,r15
   128 0000015A BA00000000              mov rdx,0
   129 0000015F 49F7FE                  idiv dword r14
   129          ******************       warning: register size specification ignored [-w+other]
   130 00000162 4989C7                  mov r15,rax
   131 00000165 4989D3                  mov r11,rdx
   132                                  
   133                                  print_exp resultMessage,r13,r12,r14,equals,r15
   133 00000168 48BA-               <1> mov rdx,%1
   133 0000016A [0000000000000000]  <1>
   133 00000172 E8(00000000)        <1> call WriteString
   133 00000177 4C89E8              <1> mov rax,%2
   133 0000017A E8(00000000)        <1> call WriteDec
   133 0000017F 4C89E2              <1> mov rdx,%3
   133 00000182 E8(00000000)        <1> call WriteString
   133 00000187 4C89F0              <1> mov rax,%4
   133 0000018A E8(00000000)        <1> call WriteDec
   133 0000018F 48BA-               <1> mov rdx,%5
   133 00000191 [0900000000000000]  <1>
   133 00000199 E8(00000000)        <1> call WriteString
   133 0000019E 4C89F8              <1> mov rax,%6
   133 000001A1 E8(00000000)        <1> call WriteInt
   134                                  
   135 000001A6 48BA-                   mov rdx,r
   135 000001A8 [0C00000000000000] 
   136 000001B0 E8(00000000)            call WriteString
   137 000001B5 4C89D8                  mov rax,r11
   138 000001B8 E8(00000000)            call WriteDec
   139                                  
   140 000001BD EB00                    jmp result
   141                                  
   142                                  result:
   143                                  ;display answer 
   144                                  
   145                                  ;result
   146                                  
   147                                  
   148 000001BF E8(00000000)            call Crlf
   149                                  
   150                                  ;epilogue
   151 000001C4 5B                      pop rbx
   152 000001C5 5D                      pop rbp 
   153 000001C6 C3                      ret
   154                                  
   155                                  
   156                                  
   157                                  
   158                                  
   159                                  section .data
   160 00000000 526573756C743A000A      resultMessage:db"Result:",0,0ah
   161 00000009 3D000A                  equals:db '=',0,0ah
   162                                  equalslen: equ($-equals)
   163 0000000C 2072656D61696E6465-     r: db " remainder:",0
   163 00000015 723A00             
   164                                  
