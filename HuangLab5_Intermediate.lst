     1                                  ;Author: Brian Huang
     2                                  ;Date: 3/2/23
     3                                  ;Purpose: Lab 4
     4                                  
     5                                  %include "CPsub64.inc"
     1                              <1> ; Last update: 2019/08/20
     2                              <1> 
     3                              <1> %ifndef CPSUB64
     4                              <1> %define CPSUB64
     5                              <1> 
     6                              <1> ; ------------------------------------------
     7                              <1> ; function prototypes
     8                              <1> ; ------------------------------------------
     9                              <1> extern Clearscr
    10                              <1> extern CloseFile
    11                              <1> extern Crlf
    12                              <1> extern ClearBuffer
    13                              <1> extern Delay
    14                              <1> extern DumpMem
    15                              <1> extern DumpCC
    16                              <1> extern DumpEflags
    17                              <1> extern DumpRegs
    18                              <1> extern IsDigit
    19                              <1> extern Mvcl
    20                              <1> extern FileOpen
    21                              <1> extern FileClose
    22                              <1> extern FileRead
    23                              <1> extern FileWrite
    24                              <1> extern ParseDecimal32
    25                              <1> extern ParseInteger32
    26                              <1> extern ParseDecimal64
    27                              <1> extern ParseInteger64
    28                              <1> extern ReadChar
    29                              <1> extern ReadDec
    30                              <1> extern ReadHex
    31                              <1> extern ReadInt
    32                              <1> extern ReadKey
    33                              <1> extern ReadString
    34                              <1> extern ReadStr
    35                              <1> extern Str_compare
    36                              <1> extern Str_copy
    37                              <1> extern Str_length
    38                              <1> extern StrLength
    39                              <1> extern Str_trim
    40                              <1> extern Str_ucase
    41                              <1> extern WriteBin
    42                              <1> extern WriteBinB
    43                              <1> extern WriteChar
    44                              <1> extern WriteDec
    45                              <1> extern WriteHex
    46                              <1> extern WriteHexDbl
    47                              <1> extern WriteHexB
    48                              <1> extern WriteInt
    49                              <1> extern WriteString
    50                              <1> ; ------------------------------------------
    51                              <1> 
    52                              <1> %endif
     6                                  
     7                                  global main
     8                                  
     9                                  section .text
    10                                  main: 
    11                                  
    12                                  
    13                                  start:
    14                                  ;print the first message
    15 00000000 B801000000              mov rax,1
    16 00000005 BF01000000              mov rdi,1
    17 0000000A 48BE-                   mov rsi,addMessage
    17 0000000C [0000000000000000] 
    18 00000014 BA33000000              mov rdx,addMessageLen
    19 00000019 0F05                    syscall
    20                                  
    21                                  
    22                                  
    23                                  
    24                                  ;print second msg
    25 0000001B B801000000              mov rax,1
    26 00000020 BF01000000              mov rdi,1
    27 00000025 48BE-                   mov rsi,secondMessage
    27 00000027 [3300000000000000] 
    28 0000002F BA1E000000              mov rdx,secondMessageLen
    29 00000034 0F05                    syscall
    30                                  
    31                                  ;get Input
    32 00000036 BAFF000000              mov rdx, 255
    33 0000003B 48B9-                   mov rcx, userInput
    33 0000003D [0000000000000000] 
    34 00000045 BB00000000              mov rbx, 0
    35 0000004A B803000000              mov rax, 3
    36 0000004F CD80                    int 80h
    37                                  
    38                                  ;convert Integer to string
    39 00000051 48BA-                   mov rdx, userInput
    39 00000053 [0000000000000000] 
    40 0000005B B9FF000000              mov rcx, 255
    41 00000060 E8(00000000)            call ParseInteger64
    42                                  
    43                                  ;save the result
    44 00000065 4989C7                  mov r15,rax
    45                                  
    46                                  
    47                                  ;duplicate so that this number is saved after calculations
    48 00000068 4D89FD                  mov r13,r15
    49                                  
    50                                  ;print message asking for second input
    51 0000006B B801000000              mov rax, 1
    52 00000070 BF01000000              mov rdi,1
    53 00000075 48BE-                   mov rsi, thirdMessage
    53 00000077 [5100000000000000] 
    54 0000007F BA1F000000              mov rdx, thirdMessageLen
    55 00000084 0F05                    syscall
    56                                  
    57                                  ;get second input
    58 00000086 BAFF000000              mov rdx,255
    59 0000008B 48B9-                   mov rcx, userInput
    59 0000008D [0000000000000000] 
    60 00000095 BB00000000              mov rbx,0
    61 0000009A B803000000              mov rax,3
    62 0000009F CD80                    int 80h
    63                                  
    64                                  ;convert Integer to string
    65 000000A1 48BA-                   mov rdx,userInput
    65 000000A3 [0000000000000000] 
    66 000000AB B9FF000000              mov rcx, 255
    67 000000B0 E8(00000000)            call ParseInteger64
    68                                  
    69                                  ;save the number
    70 000000B5 4989C6                  mov r14,rax
    71                                  
    72                                  ;print operator message
    73 000000B8 B801000000              mov rax,1
    74 000000BD BF01000000              mov rdi,1
    75 000000C2 48BE-                   mov rsi,operatorMsg
    75 000000C4 [7100000000000000] 
    76 000000CC BA25000000              mov rdx,operatorMsgLen
    77 000000D1 0F05                    syscall
    78                                  
    79                                  ;get operatoor input
    80 000000D3 48BA-                   mov rdx,userInput
    80 000000D5 [0000000000000000] 
    81 000000DD B9FF000000              mov rcx,255
    82 000000E2 E8(00000000)            call ReadString
    83                                  
    84                                  
    85                                  
    86                                  ;perform calculations
    87                                  
    88                                  
    89                                  
    90 000000E7 480FB71425-             movzx rdx, word [userInput]
    90 000000EC [00000000]         
    91 000000F0 4883FA2B                cmp rdx, '+' ;2bh in hex
    92 000000F4 7417                    je addition;equALS
    93                                  
    94 000000F6 4883FA2D                cmp rdx, '-'
    95 000000FA 740C                    je subtraction
    96                                  
    97 000000FC 4883FA2F                cmp rdx, '/'
    98 00000100 741B                    je division
    99                                  
   100 00000102 4883FA2A                cmp rdx, '*'
   101 00000106 740A                    je multiplication
   102                                  
   103                                  subtraction:
   104 00000108 4D29F7                  sub r15,r14
   105 0000010B EB20                    jmp result
   106                                  
   107                                  addition:
   108                                  
   109                                  ;do da addition
   110 0000010D 4D01F7                  add r15,r14
   111 00000110 EB1B                    jmp result
   112                                  
   113                                  multiplication:
   114 00000112 4C89F8                  mov rax,r15
   115 00000115 49F7EE                  imul r14
   116 00000118 4989C7                  mov r15,rax;save the result back to r15
   117                                  
   118 0000011B EB10                    jmp result
   119                                  
   120                                  division:
   121 0000011D 4C89F8                  mov rax,r15
   122 00000120 BA00000000              mov rdx,0
   123 00000125 49F7FE                  idiv dword r14
   123          ******************       warning: register size specification ignored [-w+other]
   124 00000128 4989C7                  mov r15,rax
   125 0000012B EB00                    jmp result
   126                                  
   127                                  result:
   128                                  ;display answer 
   129 0000012D 48BA-                   mov rdx,resultMessage
   129 0000012F [9600000000000000] 
   130 00000137 E8(00000000)            call WriteString
   131 0000013C 4C89E8                  mov rax,r13
   132 0000013F E8(00000000)            call WriteDec
   133 00000144 48BA-                   mov rdx,userInput
   133 00000146 [0000000000000000] 
   134 0000014E E8(00000000)            call WriteString
   135 00000153 4C89F0                  mov rax,r14
   136 00000156 E8(00000000)            call WriteDec
   137 0000015B 48BA-                   mov rdx,equals
   137 0000015D [9F00000000000000] 
   138 00000165 E8(00000000)            call WriteString
   139                                  
   140                                  ;result
   141                                  
   142 0000016A 4C89F8                  mov rax,r15
   143 0000016D E8(00000000)            call WriteInt
   144 00000172 E8(00000000)            call Crlf
   145                                  
   146                                  
   147                                  ;continue?
   148 00000177 48BA-                   mov rdx, continue
   148 00000179 [A200000000000000] 
   149 00000181 E8(00000000)            call WriteString
   150 00000186 E8(00000000)            call Crlf
   151 0000018B 48BA-                   mov rdx,userInput
   151 0000018D [0000000000000000] 
   152 00000195 B9FF000000              mov rcx,255
   153 0000019A E8(00000000)            call ReadString
   154 0000019F 480FB71425-             movzx rdx, word [userInput];
   154 000001A4 [00000000]         
   155 000001A8 4883FA79                cmp rdx,'y'
   156 000001AC 0F844EFEFFFF            je start
   157 000001B2 E8(00000000)            call DumpRegs
   158                                  
   159                                  
   160                                  
   161                                  exit:
   162                                  
   163                                  ;exit
   164 000001B7 B83C000000              mov rax, 60
   165 000001BC 4831FF                  xor rdi, rdi
   166 000001BF 0F05                    syscall
   167                                  
   168                                  section .data
   169 00000000 596F752077696C6C20-     addMessage: db "You will be asked for two numbers and an operator.",0ah	;first message
   169 00000009 62652061736B656420-
   169 00000012 666F722074776F206E-
   169 0000001B 756D6265727320616E-
   169 00000024 6420616E206F706572-
   169 0000002D 61746F722E0A       
   170                                  addMessageLen: equ($-addMessage) 								;get length of firstMessage									;getLength of Division Message
   171 00000033 506C6561736520656E-     secondMessage: db "Please enter the first number",0ah 				;second message
   171 0000003C 746572207468652066-
   171 00000045 69727374206E756D62-
   171 0000004E 65720A             
   172                                  secondMessageLen: equ($-secondMessage)								;get length of secondMessage
   173 00000051 506C6561736520656E-     thirdMessage: db "Please enter the second number",0ah			;third message
   173 0000005A 746572207468652073-
   173 00000063 65636F6E64206E756D-
   173 0000006C 6265720A           
   174                                  thirdMessageLen:equ($-thirdMessage)								;get the length of the third message
   175 00000070 0A                      lineBreak: db "",0ah
   176                                  lineBreakLen: equ($-lineBreak)
   177 00000071 506C6561736520656E-     operatorMsg: db "Please enter an arithmetic operator",0,0ah
   177 0000007A 74657220616E206172-
   177 00000083 6974686D6574696320-
   177 0000008C 6F70657261746F7200-
   177 00000095 0A                 
   178                                  operatorMsgLen: equ($-operatorMsg)
   179 00000096 526573756C743A000A      resultMessage:db"Result:",0,0ah
   180 0000009F 3D000A                  equals:db '=',0,0ah
   181                                  equalslen: equ($-equals)
   182 000000A2 436F6E74696E75653F-     continue: db "Continue? y/n",0,0ah
   182 000000AB 20792F6E000A       
   183                                  
   184 000000B1 79                      y: db  "y"
   185                                  
   186                                  section .bss
   187 00000000 <res 000000FF>          userInput: resb 255												;reserves 255 bytes
