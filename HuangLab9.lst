     1                                  ;Brian Huang
     2                                  ;4/13/23
     3                                  ;Lab 9
     4                                  
     5                                  %include "CPsub64.inc"
     1                              <1> ; Last update: 2019/08/20
     2                              <1> 
     3                              <1> %ifndef CPSUB64
     4                              <1> %define CPSUB64
     5                              <1> 
     6                              <1> ; ------------------------------------------
     7                              <1> ; function prototypes
     8                              <1> ; ------------------------------------------
     9                              <1> extern Clearscr
    10                              <1> extern CloseFile
    11                              <1> extern Crlf
    12                              <1> extern ClearBuffer
    13                              <1> extern Delay
    14                              <1> extern DumpMem
    15                              <1> extern DumpCC
    16                              <1> extern DumpEflags
    17                              <1> extern DumpRegs
    18                              <1> extern IsDigit
    19                              <1> extern Mvcl
    20                              <1> extern FileOpen
    21                              <1> extern FileClose
    22                              <1> extern FileRead
    23                              <1> extern FileWrite
    24                              <1> extern ParseDecimal32
    25                              <1> extern ParseInteger32
    26                              <1> extern ParseDecimal64
    27                              <1> extern ParseInteger64
    28                              <1> extern ReadChar
    29                              <1> extern ReadDec
    30                              <1> extern ReadHex
    31                              <1> extern ReadInt
    32                              <1> extern ReadKey
    33                              <1> extern ReadString
    34                              <1> extern ReadStr
    35                              <1> extern Str_compare
    36                              <1> extern Str_copy
    37                              <1> extern Str_length
    38                              <1> extern StrLength
    39                              <1> extern Str_trim
    40                              <1> extern Str_ucase
    41                              <1> extern WriteBin
    42                              <1> extern WriteBinB
    43                              <1> extern WriteChar
    44                              <1> extern WriteDec
    45                              <1> extern WriteHex
    46                              <1> extern WriteHexDbl
    47                              <1> extern WriteHexB
    48                              <1> extern WriteInt
    49                              <1> extern WriteString
    50                              <1> ; ------------------------------------------
    51                              <1> 
    52                              <1> %endif
     6                                  %include "Macros_CPsub64.inc"
     1                              <1> ;--------------------------- MACROS ------------------------------------------
     2                              <1> ; Change Log:
     3                              <1> ; 02-06-21 CP Rename ifndef for Exit from CPExit to Exit, update mShowRegister
     4                              <1> ;
     5                              <1> ;
     6                              <1> ;-----------------------------------------------------------------------------
     7                              <1> %ifndef MACRO_CPSUB64
     8                              <1> %define MACRO_CPSUB64
     9                              <1> 
    10                              <1> %define STDIN  0
    11                              <1> %define STDOUT 1
    12                              <1> %define STDERR 2
    13                              <1> 
    14                              <1> %define TAB 09h
    15                              <1> %define NL 0Ah
    16                              <1> 
    17                              <1> ; define the timespec structure used in nanosleep
    18                              <1> struc timespec
    19 00000000 <res 00000004>      <1>      tv_sec: resd 1
    20 00000004 <res 00000004>      <1>      tv_nsec: resd 1
    21                              <1> endstruc
    22                              <1> 
    23                              <1> 
    24                              <1> ; Synonym for NASM invoke
    25                              <1> %ifnmacro INVOKE
    26                              <1> %macro INVOKE 1-*.nolist
    27                              <1>      %rep %0 - 1
    28                              <1>      %rotate -1
    29                              <1>      push qword %1
    30                              <1>      %endrep
    31                              <1>      %rotate -1
    32                              <1>      call %1
    33                              <1>      add rsp, ( %0 - 1 ) * 8
    34                              <1> %endmacro
    35                              <1> %endif
    36                              <1> 
    37                              <1> 
    38                              <1> %ifnmacro mWrite
    39                              <1> ;------------------------------------------------------
    40                              <1> %macro mWrite 1.nolist
    41                              <1> ;
    42                              <1> ; Writes a string literal to standard output.
    43                              <1> ; Receives: a string enclosed in single or double 
    44                              <1> ;   quotes (null terminator not required).
    45                              <1> ;------------------------------------------------------
    46                              <1> segment .data
    47                              <1> 	%%string: db %1, 0
    48                              <1> segment .text
    49                              <1> 	push	rdx
    50                              <1> 	mov	rdx,%%string
    51                              <1>  	call	WriteString
    52                              <1>  	pop	rdx
    53                              <1> %endmacro
    54                              <1> %endif
    55                              <1> 
    56                              <1> 
    57                              <1> %ifnmacro mWriteSpace
    58                              <1> ;------------------------------------------------------
    59                              <1> %macro mWriteSpace 0-1.nolist 1
    60                              <1> ;
    61                              <1> ; Writes one or more spaces to standard output.
    62                              <1> ; Receives: an integer specifying the number of spaces.
    63                              <1> ;   If count is blank, a single space is written.
    64                              <1> ;------------------------------------------------------
    65                              <1> segment .data
    66                              <1> %%spaces: times %1 db ' '
    67                              <1> 	db 0
    68                              <1> segment .text
    69                              <1> 	push	rdx
    70                              <1> 	mov	rdx, %%spaces
    71                              <1> 	call	WriteString
    72                              <1> 	pop	rdx
    73                              <1> %endmacro
    74                              <1> %endif
    75                              <1> 
    76                              <1> 
    77                              <1> %ifnmacro mShowRegister
    78                              <1> ;---------------------------------------------------
    79                              <1> %macro mShowRegister 2.nolist
    80                              <1> ;
    81                              <1> ; Displays a 64-bit register name and its contents.
    82                              <1> ; Receives: the register string name, the register.
    83                              <1> ; Returns:  nothing
    84                              <1> ;---------------------------------------------------
    85                              <1> segment .data
    86                              <1> %%tempStr: db "  ", %1,": ",0
    87                              <1> 
    88                              <1> segment .text
    89                              <1> 	push	rax		; save reg	
    90                              <1> 	push	rdx 		; save reg
    91                              <1> 	mov	rdx, %%tempStr	; display the register name
    92                              <1> 	call	WriteString
    93                              <1> 	pop	rdx		; restore reg
    94                              <1> 	mov	rax, %2		; display the reg contents in hex
    95                              <1> 	call	WriteHex
    96                              <1> 	pop	rax             ; restore reg
    97                              <1> %endmacro
    98                              <1> %endif
    99                              <1> 
   100                              <1> 
   101                              <1> %ifnmacro ShowFlag
   102                              <1> ;---------------------------------------------------------------------
   103                              <1> %macro ShowFlag 2.nolist
   104                              <1> ;
   105                              <1> ; Helper macro.
   106                              <1> ; Display a single CPU flag value
   107                              <1> ; Directly accesses the eflags variable in Along32.asm
   108                              <1> ; (This macro cannot be placed in Macros.inc)
   109                              <1> ;---------------------------------------------------------------------
   110                              <1> segment .data
   111                              <1> %%flagStr: db "  ",%1, "="
   112                              <1> %%flagVal: db 0,0
   113                              <1> 
   114                              <1> segment .text
   115                              <1> 	push rax
   116                              <1> 	push rdx
   117                              <1> 	mov  rax, qword [eflags]	; retrieve the flags
   118                              <1> 	mov  byte [%%flagVal],'1'
   119                              <1> 	shr  rax, %2			; shift into carry flag
   120                              <1> 	jc   %%L1
   121                              <1> 	mov  byte [%%flagVal],'0'
   122                              <1> %%L1:
   123                              <1> 	mov  rdx, %%flagStr	; display flag name and value
   124                              <1> 	call WriteString
   125                              <1> 	pop  rdx
   126                              <1> 	pop  rax
   127                              <1> %endmacro
   128                              <1> %endif
   129                              <1> 
   130                              <1> 
   131                              <1> %ifnmacro ShowCC
   132                              <1> ;---------------------------------------------------------------------
   133                              <1> %macro ShowCC 2.nolist
   134                              <1> ;
   135                              <1> ; Helper macro.
   136                              <1> ; Display a single Condition Code Eflag name and value
   137                              <1> ; Directly accesses the eflags variable.
   138                              <1> ; 
   139                              <1> ;---------------------------------------------------------------------
   140                              <1> segment .data
   141                              <1> %%flagStr: db "  ",%1," : "    	; flag name plus = sign
   142                              <1> %%flagVal: db 0,0         	; flag value if 0 or 1, plus NULL
   143                              <1> 
   144                              <1> segment .text
   145                              <1> 	push rax  		; save reg
   146                              <1> 	push rdx		; save reg
   147                              <1> 	mov  rax, qword [eflags]	; retrieve the flags
   148                              <1> 	mov  byte [%%flagVal],'1'	; ON
   149                              <1> 	shr  rax, %2		; shift into carry flag
   150                              <1> 	jc   %%L1
   151                              <1> 	mov  byte [%%flagVal],'0'	; OFF
   152                              <1> %%L1:
   153                              <1> 	mov  rdx, %%flagStr	; display flag name and value
   154                              <1> 	call WriteString
   155                              <1> 	call Crlf		; line feed
   156                              <1> 	pop  rdx		; restore reg
   157                              <1> 	pop  rax		; restore reg
   158                              <1> %endmacro
   159                              <1> %endif
   160                              <1> 
   161                              <1> 
   162                              <1> 
   163                              <1> %ifnmacro CheckInit
   164                              <1> ;-------------------------------------------------------------
   165                              <1> %macro CheckInit 0.nolist
   166                              <1> ;
   167                              <1> ; Helper macro
   168                              <1> ; Check to see if the console handles have been initialized
   169                              <1> ; If not, initialize them now.
   170                              <1> ;-------------------------------------------------------------
   171                              <1> 	cmp byte [InitFlag],0
   172                              <1> 	jne %%exit
   173                              <1> 	mov byte [InitFlag],1
   174                              <1> 	call BufferFlush
   175                              <1> %%exit:
   176                              <1> %endmacro
   177                              <1> %endif
   178                              <1> 
   179                              <1> 
   180                              <1> %ifnmacro SaveRegs
   181                              <1> ;-------------------------------------------------------------
   182                              <1> %macro SaveRegs 0.nolist
   183                              <1> ;
   184                              <1> ; Convenience macro
   185                              <1> ; Save Registers
   186                              <1> ; PUSH the 16 general purpose regs to the stack.
   187                              <1> ;-------------------------------------------------------------
   188                              <1>        push rax
   189                              <1>        push rbx 
   190                              <1>        push rcx
   191                              <1>        push rdx
   192                              <1>        push rsi
   193                              <1>        push rdi
   194                              <1>        push rbp
   195                              <1>        push rsp
   196                              <1>        push r8 	
   197                              <1>        push r9  
   198                              <1>        push r10
   199                              <1>        push r11
   200                              <1>        push r12
   201                              <1>        push r13
   202                              <1>        push r14
   203                              <1>        push r15
   204                              <1> %%exit:
   205                              <1> %endmacro
   206                              <1> %endif
   207                              <1> 
   208                              <1> %ifnmacro RestoreRegs
   209                              <1> ;-------------------------------------------------------------
   210                              <1> %macro RestoreRegs 0.nolist
   211                              <1> ;
   212                              <1> ; Convenience macro
   213                              <1> ; Restore Registers
   214                              <1> ; POP the 16 general purpose regs from the stack.
   215                              <1> ;-------------------------------------------------------------
   216                              <1> 	pop r15
   217                              <1> 	pop r14
   218                              <1> 	pop r13
   219                              <1>      	pop r12
   220                              <1> 	pop r11 
   221                              <1> 	pop r10
   222                              <1>      	pop r9 
   223                              <1>      	pop r8 
   224                              <1> 	pop rsp
   225                              <1>       	pop rbp 
   226                              <1>       	pop rdi
   227                              <1>       	pop rsi
   228                              <1>       	pop rdx
   229                              <1>       	pop rcx 
   230                              <1>       	pop rbx
   231                              <1>       	pop rax
   232                              <1> %%exit:
   233                              <1> %endmacro
   234                              <1> %endif
   235                              <1> 
   236                              <1> ; Termination Macro
   237                              <1> ;-------------------------------------------------------------
   238                              <1> ;
   239                              <1> ; Convenience macro
   240                              <1> ; Exit to operating system under Linux.
   241                              <1> ;-------------------------------------------------------------
   242                              <1> %ifnmacro Exit
   243                              <1> %macro Exit 0.nolist  
   244                              <1>      mov rax, 60
   245                              <1>      xor rdi, rdi
   246                              <1>      syscall
   247                              <1> %%exit:
   248                              <1> %endmacro
   249                              <1> %endif
   250                              <1> 
   251                              <1> ; Termination Macro
   252                              <1> %ifnmacro CPexit
   253                              <1> ;-------------------------------------------------------------
   254                              <1> ;
   255                              <1> ; Convenience macro
   256                              <1> ; Exit to operating system under Linux.
   257                              <1> ;-------------------------------------------------------------
   258                              <1> %macro CPexit 0-1.nolist  
   259                              <1>      mov rax, 60
   260                              <1>      xor rdi, rdi
   261                              <1>      syscall
   262                              <1> %%exit:
   263                              <1> %endmacro
   264                              <1> %endif
   265                              <1> 
   266                              <1> %endif  ;End of Macro Definitions
     7                                  extern puts
     8                                  global main
     9                                  
    10                                  section .text
    11                                  
    12                                  main:
    13                                  
    14 00000000 4889F9                  mov rcx,rdi
    15 00000003 48FFC9                  dec rcx;ignore title program
    16                                  
    17 00000006 4889C8                  mov rax,rcx
    18 00000009 E8(00000000)            call WriteDec
    19 0000000E E8(00000000)            call Crlf
    20 00000013 830608                  add dword [rsi],8
    21 00000016 41BF08000000            mov r15,8
    22                                      print_args:
    23                                      
    24 0000001C 57                          push rdi
    25 0000001D 56                          push rsi
    26                                      
    27                                      
    28                                      
    29 0000001E 4C01FE                      add rsi,r15
    30                                  
    31                                      
    32 00000021 4883EC08                    sub rsp,8
    33                                      
    34 00000025 488B3E                      mov rdi,[rsi]
    35                                      
    36 00000028 4889F0                      mov rax,rsi
    37 0000002B E8(00000000)                call WriteInt
    38 00000030 E8(00000000)                call Crlf
    39                                  
    40                                  
    41 00000035 E8(00000000)                call puts
    42                                      
    43 0000003A 4883C408                    add rsp,8
    44                                  
    45                                  
    46 0000003E 5E                          pop rsi
    47                                      
    48 0000003F 5F                          pop rdi
    49                                      
    50                                  
    51                                      ;counter
    52                                      
    53                                      
    54                                      
    55                                  
    56 00000040 4883F901                    cmp rcx,1
    57 00000044 7409                        je exit
    58 00000046 48FFC9                      dec rcx
    59 00000049 4983C708                    add r15,8
    60 0000004D EBCD                        jmp print_args
    61                                      
    62                                      exit:
    63 0000004F C3                          ret
    64                                  
    65                                  
    66                                  section .data
    67                                  
    68 00000000 20000A                  blankLine: db ' ',0,0ah
